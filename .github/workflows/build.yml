name: build opencv library
on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'OpenCV version(branch, tag or SHA)'
        required: true
        default: ''
jobs:
  build:
    strategy:
      matrix:
        include:
          - name: "Windows"
            os: windows-latest
            release_path: "build/Release"
            platform: "win"
            type: "desktop"

          - name: "Linux"
            os: ubuntu-latest
            release_path: "build"
            platform: "linux"
            type: "desktop"

          - name: "macOS"
            os: macos-latest
            release_path: "build"
            platform: "osx"
            type: "desktop"
          
          - name: "android"
            os: ubuntu-latest
            release_path: build
            platform: "android"
            type: "mobile"
          
          - name: ios
            os: macos-latest
            release_path: build
            platform: "ios"
            type: "mobile"

    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Checkout opencv
        uses: actions/checkout@v3
        with:
          repository: opencv/opencv
          ref: ${{ inputs.ref }}
          path: opencv

      - name: Modify opencv script
        run: python3 modify_opencv.py opencv
      
      - name: Configure Default
        if: ${{ (matrix.type != 'mobile') }}
        run: cmake -S ./opencv -DBUILD_SHARED_LIBS=ON -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=./install -B ./build -C opencv_options.txt
      
      - name: Build Mobile
        if: ${{ matrix.type == 'mobile' }}
        run: ./build_${{ matrix.platform}}.sh

      - name: list dir
        run: ls

      - name: list dir 2
        run: ls opencv
      
      # - name: Build Desktop
      #   if: ${{ matrix.type == 'desktop' }}
      #   run: cmake --build ./build --config Release
      
      - name: Install Desktop
        if: ${{ matrix.type == 'desktop' }}
        run: cmake --build ./build --target install --config Release

      - name: move/rename install desktop
        run: |
          mkdir export
          mv install export/opencv
        if: ${{ matrix.type == 'desktop' }}
      
      - name: move/rename ios framework
        if: ${{ matrix.platform == 'ios' }}
        run: |
          mkdir export
          mv ios/opencv2.framework export/opencv
      
      - name: move/rename android sdk
        if: ${{ matrix.platform == 'android' }}
        run: |
          mkdir export
          mv android_sdk/OpenCV-android-sdk export/opencv

      - name: zip file
        run: 7z a -r opencv-${{ inputs.ref }}-${{ matrix.platform }}.zip ./export/opencv

      - name: list dependencies 1
        run: ls

      - name: list dependencies 2
        run: ls export
      
      # - name: unzip file
      #   run: |
      #     7z x dep.zip -odep_out
      
      - uses: actions/upload-artifact@v3
        name: upload artifacts
        with:
          name: artifact-${{ matrix.platform }}
          path: opencv-${{ inputs.ref }}-${{ matrix.platform }}.zip

  
  create_release:
    needs: build
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - name: fetch version
        id: version
        run: echo ::set-output name=version::${{ inputs.ref }}
      
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          body_path: CHANGELOG.md

  
  update_release:
    name: update_release
    needs: create_release # we need to know the upload URL
    runs-on: ubuntu-latest

    steps:
      # checkout of cource
      - name: Checkout code
        uses: actions/checkout@v3
      # ... whatever build and packaging steps you need here
      # and finally do an upload!
      - name: download_artifacts
        uses: actions/download-artifact@v3
        with:
          path: export_artifacts
      
      - name: Display artifacts
        run: ls -R
        working-directory: export_artifacts

      - name: Upload osx artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          # This is how it will be named on the release page. Put whatever name
          # you like, remember that they need to be different for each platform.
          # You can choose any build matrix parameters. For Rust I use the
          # target triple.
          asset_name: opencv-osx.zip
          # The path to the file you want to upload.
          asset_path: export_artifacts/artifact-osx/opencv-${{ inputs.ref }}-osx.zip
          # probably you will need to change it, but most likely you are
          # uploading a binary file
          asset_content_type: application/zip
      
      - name: Upload win artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: opencv-win.zip
          asset_path: export_artifacts/artifact-win/opencv-${{ inputs.ref }}-win.zip
          asset_content_type: application/zip
      
      - name: Upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: opencv-linux.zip
          asset_path: export_artifacts/artifact-linux/opencv-${{ inputs.ref }}-linux.zip
          asset_content_type: application/zip
      
      - name: Upload ios artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: opencv-ios.zip
          asset_path: export_artifacts/artifact-ios/opencv-${{ inputs.ref }}-ios.zip
          asset_content_type: application/zip
      
      - name: Upload android artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: opencv-android.zip
          asset_path: export_artifacts/artifact-android/opencv-${{ inputs.ref }}-android.zip
          asset_content_type: application/zip